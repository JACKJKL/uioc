{"version":3,"file":"bundle.js","sources":["../src/util.js","../src/Loader.js","../src/Injector.js","../src/DependencyTree.js","../src/CircularError.js","../src/plugins/BasePlugin.js","../src/plugins/ImportPlugin.js","../src/plugins/AutoPlugin.js","../src/plugins/PropertyPlugin.js","../src/plugins/ListPlugin.js","../src/plugins/MapPlugin.js","../src/plugins/AopPlugin.js","../src/IoC.js"],"sourcesContent":["/**\n * @file 工具集合\n * @author exodia(d_xinxin@163.com)\n */\nconst OBJECT = Object.prototype.toString.call({});\n\nfunction hasOwn(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction addToSet(arr, el) {\n    arr.indexOf(el) === -1 && arr.push(el);\n}\n\nfunction isObject(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT;\n}\n\nfunction isPromise(obj) {\n    return obj && typeof obj === 'object' && typeof obj.then === 'function';\n}\n\nfunction warn() {\n    if (typeof console !== 'undefined') {\n        Function.prototype.apply.call(console.warn, console, arguments);\n    }\n}\n\nfunction hasRef(obj) {\n    return isObject(obj) && typeof obj.$ref === 'string';\n}\n\nexport default {\n    hasOwn,\n    addToSet,\n    isObject,\n    isPromise,\n    hasRef: hasRef,\n    warn\n}\n","/**\n * @file 组件模块加载类\n * @author exodia(d_xinxin@163.com)\n */\n\nimport DependencyTree from './DependencyTree';\nimport CircularError from './CircularError';\n\n/**\n * @private\n */\nexport default class Loader {\n    amdLoader = getDefaultLoader();\n\n    constructor(context, skipCheckingCircularDep) {\n        this.context = context;\n        this.skipCheckingCircularDep = skipCheckingCircularDep;\n    }\n\n    setLoaderFunction(amdGlobalLoader) {\n        this.amdLoader = amdGlobalLoader;\n    }\n\n    resolveDependentModules(componentConfig, result = {}, deps) {\n        let depTree = this.skipCheckingCircularDep ? null : new DependencyTree();\n        return getDependentModules(componentConfig, this.context, result, depTree, deps);\n    }\n\n    loadModuleMap(moduleMap) {\n        let moduleIds = Object.keys(moduleMap);\n        if(!moduleIds.length) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.amdLoader(\n                moduleIds,\n                (...modules) => {\n                    modules.forEach(\n                        (factory, index) => {\n                            let moduleId = moduleIds[index];\n                            moduleMap[moduleId].forEach(\n                                config => {\n                                    if (typeof config.creator !== 'function') {\n                                        config.creator = config.creator || factory;\n                                    }\n                                }\n                            );\n                        }\n                    );\n                    resolve();\n                }\n            );\n        });\n    }\n\n    wrapCreator(config, factory) {\n        let creator = config.creator;\n\n        // 给字面量组件和非工厂组件套一层 creator，后面构造实例就可以无需分支判断，直接调用 component.creator\n        if (!config.isFactory && config.scope !== 'static') {\n            config.creator = function (...args) {\n                return new creator(...args);\n            };\n        }\n\n        return Promise.resolve(config);\n    }\n}\n\nfunction getDependentModules(component, context, result, depTree, deps) {\n    let module = component.module;\n    if (typeof component.creator !== 'function' && module) {\n        result[module] = result[module] || [];\n        result[module].push(component);\n    }\n    context.processConfig(component.id);\n\n    let child = null;\n    // depTree 为 null 表示跳过循环检测\n    if (depTree) {\n        let circular = depTree.checkForCircular(component.id);\n        if (circular) {\n            let msg = `${component.id} has circular dependencies `;\n            throw new CircularError(msg, component);\n        }\n\n        depTree.addData(component);\n        child = depTree.appendChild(new DependencyTree());\n    }\n\n\n    deps = deps || component.argDeps.concat(component.propDeps).concat(component.setterDeps || []);\n    for (let i = deps.length - 1; i > -1; --i) {\n        if (context.hasComponent(deps[i])) {\n            getDependentModules(context.getComponentConfig(deps[i]), context, result, child);\n        }\n    }\n\n    return result;\n}\n\nconst global = Function('return this')();\n\nfunction getDefaultLoader() {\n    if (typeof define === 'function' && define.amd && typeof global.require === 'function') {\n        return require;\n    }\n\n    if (typeof module !== 'undefined' && module && 'exports' in module) {\n        return (ids, cb) => cb(...(ids.map(id => require(id))));\n    }\n\n    return (ids, cb) => cb(...(ids.map(id => global[id])));\n}\n","/**\n * @file Injector 依赖注入类\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from './util';\n\nconst STORE = Symbol('store');\nconst GET_INSTANCE = Symbol('getInstance');\n\n/**\n * @private\n */\nexport default class Injector {\n\n    constructor(context) {\n        this.context = context;\n        this[STORE] = Object.create(null);\n    }\n\n    createInstance(component) {\n        if (!component) {\n            return Promise.resolve(null);\n        }\n\n        switch (component.scope) {\n            case 'singleton':\n                let id = component.id;\n                if (!(id in this[STORE])) {\n                    this[STORE][id] = this[GET_INSTANCE](component).then(instance => this[STORE][id] = instance);\n                }\n                return Promise.resolve(this[STORE][id]);\n            case 'transient':\n                return this[GET_INSTANCE](component);\n            case 'static':\n                return Promise.resolve(component.creator);\n        }\n    }\n\n    injectArgs({args}) {\n        return Promise.all(args.map(arg => u.hasRef(arg) ? this.context.getComponent(arg.$ref) : arg));\n    }\n\n    dispose() {\n        let store = this[STORE];\n        for (let k in store) {\n            let instance = store[k];\n            instance && typeof instance.dispose === 'function' && instance.dispose();\n        }\n\n        this[STORE] = null;\n    }\n\n    [GET_INSTANCE](component) {\n        return this.injectArgs(component).then(args => component.creator(...args));\n    }\n}\n\n","/**\n * @file DependencyNode 依赖树\n * @author exodia(d_xinxin@163.com)\n */\n\n/**\n * @private\n */\nexport default class DependencyNode {\n    data = [];\n    children = [];\n    parent = null;\n    \n    appendChild(node) {\n        node.parent = this;\n        this.children.push(node);\n        return node;\n    }\n\n    checkForCircular(id) {\n        let node = this.parent;\n        if (node !== null) {\n            let data = node.data;\n            for (let i = data.length - 1; i > -1; --i) {\n                if (node.data[i].id && node.data[i].id === id) {\n                    return node.data[i];\n                }\n\n                return node.checkForCircular(id);\n            }\n        }\n        \n        return null;\n    }\n\n    addData(data, checkForCircular) {\n        if (checkForCircular && this.checkForCircular(data.id)) {\n            return false;\n        }\n\n        this.data.push(data);\n        return true;\n    }\n}\n\n    \n","/**\n * @file 循环依赖错误\n * @author exodia(d_xinxin@163.com)\n */\n\n/**\n * @private\n */\nexport default class CircularError extends Error {\n    constructor(message, component) {\n        super(message);\n        this.component = component;\n    }\n\n    print(...args) {\n        if (typeof console !== 'undefined') {\n            console.warn(...args);\n        }\n    }\n}\n","/**\n * 基础插件类, 实现了默认的钩子接口, 继承此类实现自定义的生命周期钩子\n *\n * @implements {ILifeCircleHook}\n */\nexport default class BasePlugin {\n    /**\n     * @abstract\n     */\n    get name() {\n        throw new Error('need to be implement');\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onContainerInit}\n     */\n    onContainerInit(ioc, iocConfig) {\n        return iocConfig;\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onAddComponent}\n     */\n    onAddComponent(ioc, componentId, componentConfig) {\n        return componentConfig;\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onGetComponent}\n     */\n    onGetComponent(ioc, componentId, componentConfig) {\n        return componentConfig;\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#beforeCreateInstance}\n     */\n    beforeCreateInstance(ioc, componentId, instance) {\n        return Promise.resolve(instance);\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#afterCreateInstance}\n     */\n    afterCreateInstance(ioc, componentId, instance) {\n        return Promise.resolve(instance);\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onContainerDispose}\n     */\n    onContainerDispose(ioc) {}\n}\n","/**\n * @file 导入插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport BasePlugin from './BasePlugin';\nimport u from '../util';\n\nconst ANONY_PREFIX = '^uioc-';\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class ImportPlugin extends BasePlugin {\n\n    static has(obj) {\n        return u.isObject(obj) && typeof obj.$import === 'string';\n    }\n\n    static transformConfig(ioc, config) {\n        // 解析构造函数参数\n        let argConfigs = config.args;\n        let id = null;\n        let deps = argConfigs.reduce(\n            (result, argConfig, index) => {\n                if (ImportPlugin.has(argConfig)) {\n                    // 给匿名组件配置生成一个 ioc 构件id\n                    id = ImportPlugin.createAnonymousConfig(ioc, argConfig, `${config.id}-$arg.${index}.`);\n                    argConfigs[index] = {$ref: id};\n                    result.push(id);\n                }\n                return result;\n            },\n            []\n        );\n\n        // 解析属性\n        let props = config.properties;\n        for (let k in props) {\n            if (ImportPlugin.has(props[k])) {\n                id = ImportPlugin.createAnonymousConfig(ioc, props[k], `${config.id}-$prop.${k}.`);\n                props[k] = {$ref: id};\n                deps.push(id);\n            }\n        }\n\n        return deps\n    }\n\n    static createAnonymousConfig(ioc, config = {}, idPrefix) {\n        let importId = config.$import;\n        if (!ioc.hasComponent(importId)) {\n            throw new Error(`$import ${importId} component, but it is not exist, please check!!`);\n        }\n\n        let refConfig = ioc.getComponentConfig(importId);\n        config.id = (idPrefix.indexOf(ANONY_PREFIX) !== -1 ? '' : ANONY_PREFIX) + idPrefix;\n        config.$import = undefined;\n        ioc.addComponent(config.id, {...refConfig, ...config});\n\n        return config.id;\n    }\n\n    get name() {\n        return 'import';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    onGetComponent(ioc, id, config) {\n        if (this[CACHE][id]) {\n            return config;\n        }\n\n        this[CACHE][id] = ImportPlugin.transformConfig(ioc, config);\n\n        return config;\n    }\n}\n","/**\n * @file 自动注入插件\n * @author exodia(d_xinxin@163.com)\n */\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst SETTER_REGEX = /^set[A-Z]/;\nconst SET_LENGTH = 'set'.length;\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class AutoPlugin extends BasePlugin {\n    get name() {\n        return 'auto';\n    }\n\n    static getPropertyFromSetter(name, descriptor) {\n        let prop = null;\n        if (SETTER_REGEX.test(name) && typeof descriptor.value === 'function') {\n            prop = name.charAt(SET_LENGTH).toLowerCase() + name.slice(SET_LENGTH + 1);\n        }\n\n        return prop;\n    }\n\n    static setProperty(instance, propertyName, value) {\n        let method = 'set' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n        instance[method](value);\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    afterCreateInstance(ioc, id, instance) {\n        let deps = this.resolveDependencies(ioc, id, instance);\n        if (!deps.length) {\n            return Promise.resolve(instance);\n        }\n\n        return ioc.getComponent(deps).then(\n            components => {\n                components.forEach(\n                    (component, index) => AutoPlugin.setProperty(instance, deps[index], component)\n                );\n                return instance;\n            }\n        );\n    }\n\n    resolveDependencies(ioc, id, instance) {\n        if (this[CACHE][id]) {\n            return this[CACHE][id];\n        }\n\n        let config = ioc.getComponentConfig(id) || {};\n        if (!config.auto) {\n            this[CACHE][id] = [];\n            return [];\n        }\n\n        let exclude = config.properties || {};\n        let deps = [];\n        let resultSet = Object.create(null);\n        for (let proto = instance; proto; proto = Object.getPrototypeOf(proto)) {\n            let properties = Object.getOwnPropertyNames(proto);\n            properties.forEach(\n                prop => {\n                    if (!resultSet[prop]) {\n                        resultSet[prop] = true;\n                        let descriptor = Object.getOwnPropertyDescriptor(proto, prop);\n                        prop = AutoPlugin.getPropertyFromSetter(prop, descriptor);\n                        // 有属性，未和属性配置冲突，且组件已注册\n                        prop && !u.hasOwn(exclude, prop) && ioc.hasComponent(prop) && deps.push(prop);\n                    }\n                }\n            );\n        }\n\n        this[CACHE][id] = deps;\n        config.setterDeps = deps;\n        return deps;\n    }\n}\n","/**\n * @file 属性插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class PropertyPlugin extends BasePlugin {\n    static getSetter(obj) {\n        if (u.isObject(obj) && typeof obj.$setter === 'string') {\n            return obj.$setter;\n        }\n    }\n\n    static setProperty(instance, propertyName, value, setterName) {\n        if (setterName) {\n            return instance[setterName](value);\n        }\n\n        let method = 'set' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n        typeof instance[method] === 'function' ? instance[method](value) : (instance[propertyName] = value);\n    }\n\n    get name() {\n        return 'property';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    afterCreateInstance(ioc, componentId, instance) {\n        if (!ioc.hasComponent(componentId)) {\n            return Promise.resolve(instance);\n        }\n\n        let config = ioc.getComponentConfig(componentId);\n        let deps = this.resolveDependencies(ioc, componentId);\n        let props = config.properties;\n        return ioc.getComponent(deps).then(\n            components => {\n                for (let k in props) {\n                    let property = props[k];\n                    let value = u.hasRef(property) ? components[deps.indexOf(property.$ref)] : property;\n                    PropertyPlugin.setProperty(instance, k, value, PropertyPlugin.getSetter(property));\n                }\n                return instance;\n            }\n        );\n    }\n\n    resolveDependencies(ioc, id) {\n        if (this[CACHE][id]) {\n            return this[CACHE][id];\n        }\n\n        let deps = this[CACHE][id] = [];\n        let config = ioc.getComponentConfig(id);\n        let properties = config.properties;\n        for (let k in properties) {\n            let property = properties[k];\n            u.hasRef(property) && deps.push(property.$ref);\n        }\n\n        config.propDeps = deps;\n\n        return deps;\n    }\n}\n","/**\n * @file 数组集合插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class ListPlugin extends BasePlugin {\n    static LIST_COMPONENT_CONFIG = {\n        creator(...args) {\n            return args;\n        },\n        isFactory: true\n    };\n\n    static LIST_ID = `${Date.now()}_list`;\n\n    static has(obj) {\n        return u.isObject(obj) && obj.$list instanceof Array;\n    }\n\n    get name() {\n        return 'list';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    onContainerInit(ioc, iocConfig) {\n        ioc.addComponent(this.constructor.LIST_ID, this.constructor.LIST_COMPONENT_CONFIG);\n        return iocConfig;\n    }\n\n    /**\n     * @override\n     */\n    onGetComponent(ioc, id, config) {\n        if (this[CACHE][id]) {\n            return config;\n        }\n        \n        const {has, LIST_ID} = this.constructor;\n        \n        // {$list: [{}, {}]} => {$import: List.LIST_ID, args: []}\n        config.args = config.args.map(\n            argConfig => has(argConfig) ? {$import: LIST_ID, args: argConfig.$list} : argConfig\n        );\n\n        let properties = config.properties;\n        for (let k in properties) {\n            let property = properties[k];\n            if (ListPlugin.has(property)) {\n                properties[k] = {$import: LIST_ID, args: property.$list};\n            }\n        }\n\n        this[CACHE][id] = true;\n        return config;\n    }\n}\n","/**\n * @file 字典集合插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class MapPlugin extends BasePlugin {\n    static MAP_COMPONENT_CONFIG = {\n        creator: Object,\n        isFactory: true\n    };\n\n    static MAP_ID = `${(new Date()).getTime()}_map`;\n\n    static has(obj) {\n        return u.isObject(obj) && u.isObject(obj.$map);\n    }\n\n    get name() {\n        return 'map';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    onContainerInit(ioc, iocConfig) {\n        ioc.addComponent(this.constructor.MAP_ID, this.constructor.MAP_COMPONENT_CONFIG);\n        return iocConfig;\n    }\n\n    /**\n     * @override\n     */\n    onGetComponent(ioc, id, config) {\n        if (this[CACHE][id]) {\n            return config;\n        }\n\n        const {has, MAP_ID} = this.constructor;\n\n        // {$map: {}} => {$import: Map.MAP_ID, properties: {}}\n        config.args = config.args.map(\n            argConfig => has(argConfig) ? {$import: MAP_ID, properties: argConfig.$map} : argConfig\n        );\n\n        let properties = config.properties;\n        for (let k in properties) {\n            let property = properties[k];\n            if (MapPlugin.has(property)) {\n                properties[k] = {$import: MAP_ID, properties: property.$map};\n            }\n        }\n\n        return config;\n    }\n}\n","/**\n * @file aop插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport BasePlugin from './BasePlugin';\n\n/**\n * @private\n * @ignore\n */\nexport default class AopPlugin extends BasePlugin {\n    static AOP_COMPONENT_CONFIG = {\n        module: 'uaop',\n        scope: 'static'\n    };\n\n    static AOP_ID = Symbol('internalAop');\n\n    get name() {\n        return 'aop';\n    }\n\n    /**\n     * @override\n     */\n    onContainerInit(ioc, iocConfig) {\n        ioc.addComponent(this.constructor.AOP_ID, this.constructor.AOP_COMPONENT_CONFIG);\n        return iocConfig;\n    }\n\n    /**\n     * 是否需要代理\n     *\n     * @param {Object} config 配置\n     * @param {string} type 代理类型[class|object]\n     * @return {boolean}\n     */\n    canProxy(config, type) {\n        if (!('aopConfig' in config)) {\n            return false;\n        }\n\n        // 默认代理对象为 object\n        let {proxyTarget = 'object'} = config.aopConfig;\n        return proxyTarget === type;\n    }\n\n    /**\n     * 类或对象代理过程\n     *\n     * @param {IoC} ioc ioc 实例\n     * @param {string} type 代理类型[class|object]\n     * @param {Function} initial 待拦截的类或对象\n     * @param {Array.<Object>} [advisors=[]] 切面\n     * @return {Promise.<Object | Class>}\n     */\n    proxyAop(ioc, type, initial, advisors = []) {\n        const METHOD = type === 'class' ? 'createClassProxy' : 'createObjectProxy';\n        const AOP_ID = this.constructor.AOP_ID;\n\n        return ioc.getComponent(AOP_ID).then(\n            aop => advisors.reduce(\n                (target, {matcher, advices}) => aop[METHOD](target, matcher, advices),\n                initial\n            )\n        );\n    }\n\n    /**\n     * @override\n     */\n    beforeCreateInstance(ioc, componentId, instance) {\n        let config = ioc.getComponentConfig(componentId) || {};\n        let proxyTarget = 'class';\n\n        if (this.canProxy(config, proxyTarget)) {\n            return this\n                .proxyAop(ioc, proxyTarget, config.creator, config.aopConfig.advisors)\n                .then(ProxyClass => config.creator = ProxyClass)\n                .then(() => instance);\n        }\n\n        return Promise.resolve(instance);\n    }\n\n    /**\n     * @override\n     */\n    afterCreateInstance(ioc, componentId, instance) {\n        let config = ioc.getComponentConfig(componentId) || {};\n        let proxyTarget = 'object';\n\n        return this.canProxy(config, proxyTarget)\n            ? this.proxyAop(ioc, proxyTarget, instance, config.aopConfig.advisors)\n            : Promise.resolve(instance);\n    }\n}\n","/**\n * @file IoC 容器类\n * @author exodia (d_xinxin@163.com)\n */\n\nimport Injector from './Injector';\nimport u from './util';\nimport Loader from './Loader';\nimport ImportPlugin from './plugins/ImportPlugin';\nimport AutoPlugin from './plugins/AutoPlugin';\nimport PropertyPlugin from './plugins/PropertyPlugin';\nimport ListPlugin from './plugins/ListPlugin';\nimport MapPlugin from './plugins/MapPlugin';\nimport AopPlugin from './plugins/AopPlugin';\n\nconst PLUGIN_COLLECTION = Symbol('collection');\nconst COMPONENTS = Symbol('components');\nconst CREATE_COMPONENT = Symbol('createComponent');\nconst CREATE_INSTANCE = Symbol('createInstance');\nconst LOADER = Symbol('loader');\nconst INJECTOR = Symbol('injector');\nconst NULL = {};\n\n/**\n * IoC 容器类\n */\nexport default class IoC {\n    /**\n     * 根据配置实例化一个 IoC 容器\n     *\n     * @param {IoCConfig} [config] ioc 容器配置\n     */\n    constructor(config = {}) {\n        /**\n         * @private\n         */\n        this[COMPONENTS] = Object.create(null);\n\n        /**\n         * @private\n         */\n        this[PLUGIN_COLLECTION] = new PluginCollection([\n            new ListPlugin(),\n            new MapPlugin(),\n            new ImportPlugin(),\n            new AopPlugin(),\n            new PropertyPlugin(),\n            new AutoPlugin()\n        ]);\n        this[PLUGIN_COLLECTION].addPlugins(config.plugins);\n\n        /**\n         * @private\n         */\n        this[LOADER] = new Loader(this, !!config.skipCheckingCircularDep);\n\n        /**\n         * @private\n         */\n        this[INJECTOR] = new Injector(this);\n\n        config = this[PLUGIN_COLLECTION].onContainerInit(this, config);\n        this.initConfig(config);\n    }\n\n    /**\n     * 初始化配置\n     * @param {IoCConfig} iocConfig ioc 配置\n     * @protected\n     */\n    initConfig(iocConfig) {\n\n        if (iocConfig.loader) {\n            this.setLoaderFunction(iocConfig.loader);\n        }\n\n        this.addComponent(iocConfig.components || {});\n    }\n\n    /**\n     *\n     * 向容器中注册组件\n     *\n     * @param {string | Object.<string, ComponentConfig>} id 组件 id 或者组件配置集合\n     * @param {ComponentConfig} [config] 组件配置, 第一个参数为组件 id 时有效\n     * @example\n     * ioc.addComponent('list', {\n     *     // 构造函数创建构件 new creator, 或者字符串，字符串则为 amd 模块名\n     *     creator: require('./List'),\n     *     scope: 'transient',\n     *     args: [{$ref: 'entityName'}],\n     *\n     *     // 属性注入， 不设置$setter, 则直接instance.xxx = xxx\n     *     properties: {\n     *          model: {$ref: 'listModel'},\n     *          view: {$ref: 'listView'},\n     *          name: 'xxxx' // 未设置$ref/$import操作符，'xxxx' 即为依赖值\n     *     }\n     * });\n     *\n     * ioc.addComponent({\n     *     listData: {\n     *         creator: 'ListData',\n     *         scope: 'transient',\n     *         properties: {\n     *             data: {\n     *                 $import: 'requestStrategy', // 创建匿名组件，默认继承 requestStrategy 的配置，\n     *                 args: ['list', 'list'] // 重写 requestStrategy 的 args 配置\n     *             }\n     *         }\n     *      }\n     * });\n     */\n    addComponent(id, config) {\n        if (typeof id === 'object') {\n            for (let k in id) {\n                this.addComponent(k, id[k]);\n            }\n            return;\n        }\n\n        if (this.hasComponent(id)) {\n            throw new Error(`${String(id)} has been added!`);\n        }\n        else {\n            this[COMPONENTS][id] = this[CREATE_COMPONENT].call(this, id, config);\n        }\n    }\n\n    /**\n     * 获取组件实例\n     *\n     * @param {string | string[]} id 单个组件 id 字符串或者一系列组件 id 数组\n     * @return {Promise<*> | Promise<*[]>} 值为组件实例(传入参数为组件数组时, 值为组件实例数组)的 promise\n     */\n    getComponent(id) {\n        if (id instanceof Array) {\n            return Promise.all(id.map(id => this.getComponent(id)));\n        }\n        let moduleMap = Object.create(null);\n\n        if (!this.hasComponent(id)) {\n            id = String(id);\n            return Promise.reject(new Error(`\\`${id}\\` has not been added to the Ioc`));\n        }\n        else {\n            let config = this.getComponentConfig(id);\n            this.processConfig(id);\n            try {\n                moduleMap = this[LOADER].resolveDependentModules(config, moduleMap, config.argDeps);\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        }\n\n        return this[LOADER].loadModuleMap(moduleMap).then(() => this[CREATE_INSTANCE](id));\n    }\n\n    /**\n     * 检测是否注册过某个组件\n     *\n     * @param {string} id 组件 id\n     * @return {bool}\n     */\n    hasComponent(id) {\n        return !!this[COMPONENTS][id];\n    }\n\n    /**\n     * 获取组件配置，不传入则返回所有组件配置\n     *\n     * @ignore\n     * @param {string} [id] 组件id\n     * @return {*}\n     */\n    getComponentConfig(id) {\n        return id ? this[COMPONENTS][id] : this[COMPONENTS];\n    }\n\n    /**\n     * 设置 IoC 的模块加载器\n     *\n     * @param {Function} amdLoader 符合 AMD 规范的模块加载器\n     */\n    setLoaderFunction(amdLoader) {\n        this[LOADER].setLoaderFunction(amdLoader);\n    }\n\n    /**\n     * 销毁容器，会遍历容器中的单例，如果有设置 dispose，调用他们的 dispose 方法\n     */\n    dispose() {\n        this[PLUGIN_COLLECTION].onContainerDispose(this);\n        this[INJECTOR].dispose();\n        this[COMPONENTS] = null;\n    }\n\n    /**\n     * 在指定位置添加插件\n     *\n     * @param {ILifeCircleHook[]} plugins 插件数组\n     * @param {number} [pos] 插入位置, 默认为当前 ioc 容器插件队列末尾\n     */\n    addPlugins(plugins, pos) {\n        this[PLUGIN_COLLECTION].addPlugins(plugins, pos);\n    }\n\n    /**\n     * 获取当前实例的插件队列\n     *\n     * @return {ILifeCircleHook[]}\n     */\n    getPlugins() {\n        return this[PLUGIN_COLLECTION].getPlugins();\n    }\n\n    /**\n     * 移除指定的插件或指定位置的插件\n     *\n     * @param {number | ILifeCircleHook} pluginOrPos 插件实例或者插件位置\n     * @return {bool} 成功移除返回 true\n     */\n    removePlugin(pluginOrPos) {\n        return this[PLUGIN_COLLECTION].removePlugin(pluginOrPos);\n    }\n\n    // todo: to be private\n    /**\n     * @ignore\n     */\n    processConfig(id) {\n        let config = this.getComponentConfig(id);\n        config = this[PLUGIN_COLLECTION].onGetComponent(this, id, config);\n        this[COMPONENTS][id] = config;\n        if (!config.argDeps) {\n            let deps = config.argDeps = [];\n            let args = config.args;\n            for (let i = args.length - 1; i > -1; --i) {\n                u.hasRef(args[i]) && deps.push(args[i].$ref);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    [CREATE_COMPONENT](id, config) {\n        config = this[PLUGIN_COLLECTION].onAddComponent(this, id, config);\n        return {\n            id: id,\n            args: [],\n            properties: {},\n            argDeps: null,\n            propDeps: null,\n            setterDeps: null,\n            scope: 'transient',\n            creator: null,\n            module: undefined,\n            isFactory: false,\n            auto: false,\n            instance: null,\n            ...config\n        };\n    }\n\n    /**\n     * @private\n     */\n    [CREATE_INSTANCE](id) {\n        return this[PLUGIN_COLLECTION].beforeCreateInstance(this, id)\n            .then(\n                instance => {\n                    if (instance === NULL) {\n                        let component = this.hasComponent(id) ? this.getComponentConfig(id) : null;\n                        return this[LOADER]\n                            .wrapCreator(component)\n                            .then(component => this[INJECTOR].createInstance(component));\n                    }\n\n                    return instance;\n                }\n            )\n            .then(instance => this[PLUGIN_COLLECTION].afterCreateInstance(this, id, instance));\n    }\n}\n\nconst PLUGINS = Symbol('plugins');\n\nclass PluginCollection {\n    constructor(plugins = []) {\n        this[PLUGINS] = plugins;\n    }\n\n    onContainerInit(ioc, iocConfig) {\n        return this[PLUGINS].reduce(\n            (config, plugin) => plugin.onContainerInit(ioc, config),\n            iocConfig\n        );\n    }\n\n    onAddComponent(ioc, componentId, initialComponentConfig) {\n        return this[PLUGINS].reduce(\n            (componentConfig, plugin) => plugin.onAddComponent(ioc, componentId, componentConfig),\n            initialComponentConfig\n        );\n    }\n\n    onGetComponent(ioc, componentId, initialComponentConfig) {\n        return this[PLUGINS].reduce(\n            (componentConfig, plugin) => plugin.onGetComponent(ioc, componentId, componentConfig),\n            initialComponentConfig\n        );\n    }\n\n    beforeCreateInstance(ioc, componentId) {\n        return this[PLUGINS].reduce(\n            (instancePromise, plugin) => instancePromise.then(\n                instance => Promise.resolve(plugin.beforeCreateInstance(ioc, componentId, instance))\n            ),\n            Promise.resolve(NULL)\n        );\n    }\n\n    afterCreateInstance(ioc, componentId, instance) {\n        return this[PLUGINS].reduce(\n            (instancePromise, plugin) => instancePromise.then(\n                instance => {\n                    let result = plugin.afterCreateInstance(ioc, componentId, instance);\n                    return u.isPromise(result) ? result : Promise.resolve(instance);\n                }\n            ),\n            Promise.resolve(instance)\n        );\n    }\n\n    onContainerDispose(ioc) {\n        this[PLUGINS].forEach(plugin => plugin.onContainerDispose(ioc));\n    }\n\n    addPlugins(plugins = [], pos = this[PLUGINS].length) {\n        this[PLUGINS].splice(pos, 0, ...plugins);\n    }\n\n    getPlugins() {\n        return this[PLUGINS].slice(0);\n    }\n\n    removePlugin(pluginOrPos) {\n        if (typeof pluginOrPos !== 'number') {\n            pluginOrPos = this[PLUGINS].indexOf(pluginOrPos);\n            pluginOrPos = pluginOrPos === -1 ? this[PLUGINS].length : pluginOrPos;\n        }\n\n        return !!this[PLUGINS].splice(pluginOrPos, 1).length;\n    }\n}\n"],"names":["isObject","obj","Object","prototype","toString","call","OBJECT","getDependentModules","component","context","result","depTree","deps","module","creator","push","processConfig","id","child","checkForCircular","msg","CircularError","addData","appendChild","DependencyTree","i","argDeps","concat","propDeps","setterDeps","length","hasComponent","getComponentConfig","getDefaultLoader","define","amd","global","require","ids","cb","map","object","key","hasOwnProperty","arr","el","indexOf","then","$ref","console","apply","warn","arguments","STORE","Symbol","GET_INSTANCE","Injector","create","Promise","resolve","scope","this","_this","instance","args","all","u","hasRef","arg","_this2","getComponent","store","k","dispose","injectArgs","DependencyNode","data","children","parent","node","message","Error","Loader","skipCheckingCircularDep","amdLoader","amdGlobalLoader","componentConfig","moduleMap","moduleIds","keys","modules","forEach","factory","index","moduleId","config","isFactory","Function","BasePlugin","ioc","iocConfig","componentId","CACHE","ImportPlugin","$import","argConfigs","reduce","argConfig","has","createAnonymousConfig","props","properties","idPrefix","importId","refConfig","undefined","addComponent","transformConfig","SETTER_REGEX","SET_LENGTH","AutoPlugin","name","descriptor","prop","test","value","charAt","toLowerCase","slice","propertyName","toUpperCase","resolveDependencies","setProperty","auto","exclude","resultSet","proto","getPrototypeOf","getOwnPropertyNames","getOwnPropertyDescriptor","getPropertyFromSetter","hasOwn","PropertyPlugin","$setter","setterName","method","property","components","getSetter","ListPlugin","$list","Array","constructor","LIST_ID","LIST_COMPONENT_CONFIG","Date","now","MapPlugin","$map","MAP_ID","MAP_COMPONENT_CONFIG","getTime","AopPlugin","AOP_ID","AOP_COMPONENT_CONFIG","type","aopConfig","proxyTarget","initial","advisors","METHOD","target","matcher","advices","aop","canProxy","proxyAop","ProxyClass","PLUGIN_COLLECTION","COMPONENTS","CREATE_COMPONENT","CREATE_INSTANCE","LOADER","INJECTOR","NULL","IoC","PluginCollection","addPlugins","plugins","onContainerInit","initConfig","loader","setLoaderFunction","String","reject","resolveDependentModules","e","loadModuleMap","onContainerDispose","pos","getPlugins","pluginOrPos","removePlugin","onGetComponent","onAddComponent","beforeCreateInstance","wrapCreator","createInstance","afterCreateInstance","PLUGINS","plugin","initialComponentConfig","instancePromise","isPromise","splice"],"mappings":"+LAcA,SAASA,EAASC,UACPC,OAAOC,UAAUC,SAASC,KAAKJ,KAASK,WCuD1CC,EAAoBC,EAAWC,EAASC,EAAQC,EAASC,OAC1DC,EAASL,EAAUK,OACU,mBAAtBL,EAAUM,SAA0BD,MACpCA,GAAUH,EAAOG,SACjBA,GAAQE,KAAKP,MAEhBQ,cAAcR,EAAUS,QAE5BC,EAAQ,QAERP,EAAS,IACMA,EAAQQ,iBAAiBX,EAAUS,IACpC,KACNG,EAASZ,EAAUS,uCACjB,IAAII,EAAcD,EAAKZ,KAGzBc,QAAQd,KACRG,EAAQY,YAAY,IAAIC,OAK/B,IAAIC,KADFb,GAAQJ,EAAUkB,QAAQC,OAAOnB,EAAUoB,UAAUD,OAAOnB,EAAUqB,iBAC3DC,OAAS,EAAGL,GAAK,IAAKA,EAChChB,EAAQsB,aAAanB,EAAKa,OACNhB,EAAQuB,mBAAmBpB,EAAKa,IAAKhB,EAASC,EAAQQ,UAI3ER,EAKX,SAASuB,UACiB,mBAAXC,QAAyBA,OAAOC,KAAiC,mBAAnBC,EAAOC,QACrDA,QAGW,oBAAXxB,QAA0BA,QAAU,YAAaA,OACjD,SAACyB,EAAKC,UAAOA,iBAAOD,EAAIE,IAAI,mBAAMH,QAAQpB,QAG9C,SAACqB,EAAKC,UAAOA,iBAAOD,EAAIE,IAAI,mBAAMJ,EAAOnB,yyCD7G9CX,EAASJ,OAAOC,UAAUC,SAASC,mBAEzC,SAAgBoC,EAAQC,UACbxC,OAAOC,UAAUwC,eAAetC,KAAKoC,EAAQC,aAGxD,SAAkBE,EAAKC,IACE,MAAjBC,QAAQD,IAAcD,EAAI7B,KAAK8B,yBAOvC,SAAmB5C,UACRA,GAAsB,qBAARA,gBAAAA,KAAwC,mBAAbA,EAAI8C,aASxD,SAAgB9C,UACLD,EAASC,IAA4B,iBAAbA,EAAI+C,WAPvC,WAC2B,oBAAZC,kBACE9C,UAAU+C,MAAM7C,KAAK4C,QAAQE,KAAMF,QAASG,aEjBvDC,EAAQC,OAAO,SACfC,EAAeD,OAAO,eAKPE,wBAEL/C,kBACHA,QAAUA,OACV4C,GAASnD,OAAOuD,OAAO,uDAGjBjD,kBACNA,SACMkD,QAAQC,QAAQ,aAGnBnD,EAAUoD,WACT,gBACG3C,EAAKT,EAAUS,UACbA,KAAM4C,KAAKR,UACRA,GAAOpC,GAAM4C,KAAKN,GAAc/C,GAAWuC,KAAK,mBAAYe,EAAKT,GAAOpC,GAAM8C,KAEhFL,QAAQC,QAAQE,KAAKR,GAAOpC,QAClC,mBACM4C,KAAKN,GAAc/C,OACzB,gBACMkD,QAAQC,QAAQnD,EAAUM,2DAIjCkD,IAAAA,YACDN,QAAQO,IAAID,EAAKxB,IAAI,mBAAO0B,EAAEC,OAAOC,GAAOC,EAAK5D,QAAQ6D,aAAaF,EAAIpB,MAAQoB,2CAIrFG,EAAQV,KAAKR,OACZ,IAAImB,KAAKD,EAAO,KACbR,EAAWQ,EAAMC,MACmB,mBAArBT,EAASU,SAA0BV,EAASU,eAG9DpB,GAAS,YAGjBE,iBAAc/C,UACJqD,KAAKa,WAAWlE,GAAWuC,KAAK,mBAAQvC,EAAUM,kBAAWkD,eC9CvDW,yCACjBC,aACAC,iBACAC,OAAS,mDAEGC,YACHD,OAASjB,UACTgB,SAAS9D,KAAKgE,GACZA,2CAGM9D,OACT8D,EAAOlB,KAAKiB,UACH,OAATC,MAEK,IAAItD,EADEsD,EAAKH,KACE9C,OAAS,EAAGL,GAAK,IAAKA,SAChCsD,EAAKH,KAAKnD,GAAGR,IAAM8D,EAAKH,KAAKnD,GAAGR,KAAOA,EAChC8D,EAAKH,KAAKnD,GAGdsD,EAAK5D,iBAAiBF,UAI9B,qCAGH2D,EAAMzD,WACNA,IAAoB0C,KAAK1C,iBAAiByD,EAAK3D,YAI9C2D,KAAK7D,KAAK6D,IACR,YCjCMvD,yBACL2D,EAASxE,4EACXwE,aACDxE,UAAYA,wDAIM,oBAAZyC,QAAyB,mBACxBE,gCARuB8B,OHGtBC,wBAGLzE,EAAS0E,kBAFrBC,UAAYnD,SAGHxB,QAAUA,OACV0E,wBAA0BA,sDAGjBE,QACTD,UAAYC,kDAGGC,OAAiB5E,4DAAaE,eAC9CD,EAAUkD,KAAKsB,wBAA0B,KAAO,IAAI3D,SACjDjB,EAAoB+E,EAAiBzB,KAAKpD,QAASC,EAAQC,EAASC,yCAGjE2E,cACNC,EAAYtF,OAAOuF,KAAKF,UACxBC,EAAU1D,OAIP,IAAI4B,QAAQ,cACV0B,UACDI,EACA,sCAAIE,2CACQC,QACJ,SAACC,EAASC,OACFC,EAAWN,EAAUK,KACfC,GAAUH,QAChB,YACkC,mBAAnBI,EAAOjF,YACPA,QAAUiF,EAAOjF,SAAW8E,eAbxDlC,QAAQC,8CAyBXoC,EAAQH,OACZ9E,EAAUiF,EAAOjF,eAGhBiF,EAAOC,WAA8B,WAAjBD,EAAOnC,UACrB9C,QAAU,sCAAakD,kFACflD,gBAAWkD,OAIvBN,QAAQC,QAAQoC,YAoCzB3D,EAAS6D,SAAS,iBIjGHC,sFAWDC,EAAKC,UACVA,yCAMID,EAAKE,EAAaf,UACtBA,yCAMIa,EAAKE,EAAaf,UACtBA,+CAMUa,EAAKE,EAAatC,UAC5BL,QAAQC,QAAQI,+CAMPoC,EAAKE,EAAatC,UAC3BL,QAAQC,QAAQI,8CAMRoC,uCAzCT,IAAIlB,MAAM,iCCDlBqB,EAAQhD,OAAO,SAKAiD,+GAwDRD,GAASpG,OAAOuD,OAAO,mBAxDMyC,yCAmD3B,uCAjDAjG,UACAiE,EAAElE,SAASC,IAA+B,iBAAhBA,EAAIuG,gDAGlBL,EAAKJ,OAEpBU,EAAaV,EAAO/B,KACpB/C,EAAK,KACLL,EAAO6F,EAAWC,OAClB,SAAChG,EAAQiG,EAAWd,UACZU,EAAaK,IAAID,OAEZJ,EAAaM,sBAAsBV,EAAKQ,EAAcZ,EAAO9E,YAAW4E,SAClEA,IAAU7C,KAAM/B,KACpBF,KAAKE,IAETP,OAMXoG,EAAQf,EAAOgB,eACd,IAAIvC,KAAKsC,EACNP,EAAaK,IAAIE,EAAMtC,QAClB+B,EAAaM,sBAAsBV,EAAKW,EAAMtC,GAAOuB,EAAO9E,aAAYuD,SACvEA,IAAMxB,KAAM/B,KACbF,KAAKE,WAIXL,gDAGkBuF,OAAKJ,4DAAaiB,eACvCC,EAAWlB,EAAOS,YACjBL,EAAIpE,aAAakF,SACZ,IAAIhC,iBAAiBgC,yDAG3BC,EAAYf,EAAInE,mBAAmBiF,YAChChG,KAA0C,IAApC+F,EAASlE,QAjDT,UAiDwC,GAjDxC,UAiD6DkE,IACnER,aAAUW,IACbC,aAAarB,EAAO9E,QAAQiG,EAAcnB,IAEvCA,EAAO9E,iDAeHkF,EAAKlF,EAAI8E,UAChBlC,KAAKyC,GAAOrF,GACL8E,QAGNO,GAAOrF,GAAMsF,EAAac,gBAAgBlB,EAAKJ,GAE7CA,YC5ETuB,EAAe,YACfC,EAAa,MAAMzF,OACnBwE,EAAQhD,OAAO,SAKAkE,+GAqBRlB,GAASpG,OAAOuD,OAAO,mBArBIyC,yCAEzB,uDAGkBuB,EAAMC,OAC3BC,EAAO,YACPL,EAAaM,KAAKH,IAAqC,mBAArBC,EAAWG,UACtCJ,EAAKK,OAAOP,GAAYQ,cAAgBN,EAAKO,MAAMT,EAAa,IAGpEI,sCAGQ5D,EAAUkE,EAAcJ,KAC1B,MAAQI,EAAaH,OAAO,GAAGI,cAAgBD,EAAaD,MAAM,IAC9DH,sDAQD1B,EAAKlF,EAAI8C,OACrBnD,EAAOiD,KAAKsE,oBAAoBhC,EAAKlF,EAAI8C,UACxCnD,EAAKkB,OAIHqE,EAAI7B,aAAa1D,GAAMmC,KAC1B,qBACe4C,QACP,SAACnF,EAAWqF,UAAU2B,EAAWY,YAAYrE,EAAUnD,EAAKiF,GAAQrF,KAEjEuD,IARJL,QAAQC,QAAQI,+CAaXoC,EAAKlF,EAAI8C,MACrBF,KAAKyC,GAAOrF,UACL4C,KAAKyC,GAAOrF,OAGnB8E,EAASI,EAAInE,mBAAmBf,WAC/B8E,EAAOsC,iBACH/B,GAAOrF,aAOX,IAHDqH,EAAUvC,EAAOgB,eACjBnG,KACA2H,EAAYrI,OAAOuD,OAAO,MACrB+E,EAAQzE,EAAUyE,EAAOA,EAAQtI,OAAOuI,eAAeD,aAAvDA,GACYtI,OAAOwI,oBAAoBF,GACjC7C,QACP,gBACS4C,EAAUZ,GAAO,GACRA,IAAQ,MACdD,EAAaxH,OAAOyI,yBAAyBH,EAAOb,MACjDH,EAAWoB,sBAAsBjB,EAAMD,MAErCxD,EAAE2E,OAAOP,EAASX,IAASxB,EAAIpE,aAAa4F,IAAS/G,EAAKG,KAAK4G,OAT/Ea,eAeJlC,GAAOrF,GAAML,IACXiB,WAAajB,EACbA,WC7ET0F,EAAQhD,OAAO,SAKAwF,+GAsBRxC,GAASpG,OAAOuD,OAAO,mBAtBQyC,yCAiB7B,+CAhBMjG,MACTiE,EAAElE,SAASC,IAA+B,iBAAhBA,EAAI8I,eACvB9I,EAAI8I,4CAIAhF,EAAUkE,EAAcJ,EAAOmB,MAC1CA,SACOjF,EAASiF,GAAYnB,OAG5BoB,EAAS,MAAQhB,EAAaH,OAAO,GAAGI,cAAgBD,EAAaD,MAAM,GACnD,mBAArBjE,EAASkF,GAAyBlF,EAASkF,GAAQpB,GAAU9D,EAASkE,GAAgBJ,qDAe7E1B,EAAKE,EAAatC,OAC7BoC,EAAIpE,aAAasE,UACX3C,QAAQC,QAAQI,OAGvBgC,EAASI,EAAInE,mBAAmBqE,GAChCzF,EAAOiD,KAAKsE,oBAAoBhC,EAAKE,GACrCS,EAAQf,EAAOgB,kBACZZ,EAAI7B,aAAa1D,GAAMmC,KAC1B,gBACS,IAAIyB,KAAKsC,EAAO,KACboC,EAAWpC,EAAMtC,GACjBqD,EAAQ3D,EAAEC,OAAO+E,GAAYC,EAAWvI,EAAKkC,QAAQoG,EAASlG,OAASkG,IAC5Dd,YAAYrE,EAAUS,EAAGqD,EAAOiB,EAAeM,UAAUF,WAErEnF,gDAKCoC,EAAKlF,MACjB4C,KAAKyC,GAAOrF,UACL4C,KAAKyC,GAAOrF,OAGnBL,EAAOiD,KAAKyC,GAAOrF,MACnB8E,EAASI,EAAInE,mBAAmBf,GAChC8F,EAAahB,EAAOgB,eACnB,IAAIvC,KAAKuC,EAAY,KAClBmC,EAAWnC,EAAWvC,KACxBL,OAAO+E,IAAatI,EAAKG,KAAKmI,EAASlG,eAGtCpB,SAAWhB,EAEXA,WCpET0F,EAAQhD,OAAO,SAKA+F,+GAoBR/C,GAASpG,OAAOuD,OAAO,mBApBIyC,yCAezB,qCALAjG,UACAiE,EAAElE,SAASC,IAAQA,EAAIqJ,iBAAiBC,qDAenCpD,EAAKC,YACbgB,aAAavD,KAAK2F,YAAYC,QAAS5F,KAAK2F,YAAYE,uBACrDtD,yCAMID,EAAKlF,EAAI8E,MAChBlC,KAAKyC,GAAOrF,UACL8E,QAGYlC,KAAK2F,YAArB5C,IAAAA,IAAK6C,IAAAA,UAGLzF,KAAO+B,EAAO/B,KAAKxB,IACtB,mBAAaoE,EAAID,IAAcH,QAASiD,EAASzF,KAAM2C,EAAU2C,OAAS3C,QAG1EI,EAAahB,EAAOgB,eACnB,IAAIvC,KAAKuC,EAAY,KAClBmC,EAAWnC,EAAWvC,GACtB6E,EAAWzC,IAAIsC,OACJ1E,IAAMgC,QAASiD,EAASzF,KAAMkF,EAASI,oBAIrDhD,GAAOrF,IAAM,EACX8E,WAvDMsD,EACVK,qEACQ1F,gDACAA,cAEA,GALEqF,EAQVI,QAAaE,KAAKC,cChB7B,IAGMtD,EAAQhD,OAAO,SAKAuG,+GAkBRvD,GAASpG,OAAOuD,OAAO,mBAlBGyC,yCAaxB,oCALAjG,UACAiE,EAAElE,SAASC,IAAQiE,EAAElE,SAASC,EAAI6J,qDAe7B3D,EAAKC,YACbgB,aAAavD,KAAK2F,YAAYO,OAAQlG,KAAK2F,YAAYQ,sBACpD5D,yCAMID,EAAKlF,EAAI8E,MAChBlC,KAAKyC,GAAOrF,UACL8E,QAGWlC,KAAK2F,YAApB5C,IAAAA,IAAKmD,IAAAA,SAGL/F,KAAO+B,EAAO/B,KAAKxB,IACtB,mBAAaoE,EAAID,IAAcH,QAASuD,EAAQhD,WAAYJ,EAAUmD,MAAQnD,QAG9EI,EAAahB,EAAOgB,eACnB,IAAIvC,KAAKuC,EAAY,KAClBmC,EAAWnC,EAAWvC,GACtBqF,EAAUjD,IAAIsC,OACH1E,IAAMgC,QAASuD,EAAQhD,WAAYmC,EAASY,cAIxD/D,WApDM8D,EACVG,8BACM9J,kBACE,GAHE2J,EAMVE,QAAa,IAAIJ,MAAQM,qBCRfC,6HAAkBhE,8CAenBC,EAAKC,YACbgB,aAAavD,KAAK2F,YAAYW,OAAQtG,KAAK2F,YAAYY,sBACpDhE,mCAUFL,EAAQsE,QACP,cAAetE,UACV,QAIoBA,EAAOuE,UAAjCC,8BAAc,cACIF,mCAYlBlE,EAAKkE,EAAMG,OAASC,4DACnBC,EAAkB,UAATL,EAAmB,mBAAqB,oBACjDF,EAAStG,KAAK2F,YAAYW,cAEzBhE,EAAI7B,aAAa6F,GAAQpH,KAC5B,mBAAO0H,EAAS/D,OACZ,SAACiE,SAASC,IAAAA,QAASC,IAAAA,eAAaC,EAAIJ,GAAQC,EAAQC,EAASC,IAC7DL,kDAQSrE,EAAKE,EAAatC,OAC/BgC,EAASI,EAAInE,mBAAmBqE,cAGhCxC,KAAKkH,SAAShF,EAFA,SAGPlC,KACFmH,SAAS7E,EAJA,QAIkBJ,EAAOjF,QAASiF,EAAOuE,UAAUG,UAC5D1H,KAAK,mBAAcgD,EAAOjF,QAAUmK,IACpClI,KAAK,kBAAMgB,IAGbL,QAAQC,QAAQI,+CAMPoC,EAAKE,EAAatC,OAC9BgC,EAASI,EAAInE,mBAAmBqE,cAG7BxC,KAAKkH,SAAShF,EAFH,UAGZlC,KAAKmH,SAAS7E,EAHF,SAGoBpC,EAAUgC,EAAOuE,UAAUG,UAC3D/G,QAAQC,QAAQI,sCA3Ef,eATMmG,EACVE,6BACK,aACD,UAHMF,EAMVC,OAAS7G,OAAO,eCZ3B,IAUM4H,EAAoB5H,OAAO,cAC3B6H,EAAa7H,OAAO,cACpB8H,EAAmB9H,OAAO,mBAC1B+H,EAAkB/H,OAAO,kBACzBgI,EAAShI,OAAO,UAChBiI,EAAWjI,OAAO,YAClBkI,KAKeC,8BAML1F,2EAIHoF,GAAcjL,OAAOuD,OAAO,WAK5ByH,GAAqB,IAAIQ,GAC1B,IAAIrC,EACJ,IAAIQ,EACJ,IAAItD,EACJ,IAAI2D,EACJ,IAAIpB,EACJ,IAAItB,SAEH0D,GAAmBS,WAAW5F,EAAO6F,cAKrCN,GAAU,IAAIpG,EAAOrB,OAAQkC,EAAOZ,8BAKpCoG,GAAY,IAAI/H,EAASK,QAErBA,KAAKqH,GAAmBW,gBAAgBhI,KAAMkC,QAClD+F,WAAW/F,gDAQTK,GAEHA,EAAU2F,aACLC,kBAAkB5F,EAAU2F,aAGhC3E,aAAahB,EAAU+C,qDAqCnBlI,EAAI8E,MACK,qBAAP9E,gBAAAA,QAOP4C,KAAK9B,aAAad,SACZ,IAAIgE,MAASgH,OAAOhL,4BAGrBkK,GAAYlK,GAAM4C,KAAKuH,GAAkB/K,KAAKwD,KAAM5C,EAAI8E,YAVxD,IAAIvB,KAAKvD,OACLmG,aAAa5C,EAAGvD,EAAGuD,yCAmBvBvD,iBACLA,aAAcsI,aACP7F,QAAQO,IAAIhD,EAAGuB,IAAI,mBAAMsB,EAAKQ,aAAarD,UAElDsE,EAAYrF,OAAOuD,OAAO,UAEzBI,KAAK9B,aAAad,YACdgL,OAAOhL,GACLyC,QAAQwI,OAAO,IAAIjH,UAAWhE,0CAGjC8E,EAASlC,KAAK7B,mBAAmBf,QAChCD,cAAcC,SAEH4C,KAAKyH,GAAQa,wBAAwBpG,EAAQR,EAAWQ,EAAOrE,SAE/E,MAAO0K,UACI1I,QAAQwI,OAAOE,UAIvBvI,KAAKyH,GAAQe,cAAc9G,GAAWxC,KAAK,kBAAMe,EAAKuH,GAAiBpK,0CASrEA,WACA4C,KAAKsH,GAAYlK,8CAUXA,UACRA,EAAK4C,KAAKsH,GAAYlK,GAAM4C,KAAKsH,6CAQ1B/F,QACTkG,GAAQU,kBAAkB5G,0CAO1B8F,GAAmBoB,mBAAmBzI,WACtC0H,GAAU9G,eACV0G,GAAc,wCASZS,EAASW,QACXrB,GAAmBS,WAAWC,EAASW,+CASrC1I,KAAKqH,GAAmBsB,kDAStBC,UACF5I,KAAKqH,GAAmBwB,aAAaD,yCAOlCxL,OACN8E,EAASlC,KAAK7B,mBAAmBf,QAC5B4C,KAAKqH,GAAmByB,eAAe9I,KAAM5C,EAAI8E,QACrDoF,GAAYlK,GAAM8E,GAClBA,EAAOrE,YAGH,IAFDd,EAAOmF,EAAOrE,WACdsC,EAAO+B,EAAO/B,KACTvC,EAAIuC,EAAKlC,OAAS,EAAGL,GAAK,IAAKA,IAClC0C,OAAOH,EAAKvC,KAAOb,EAAKG,KAAKiD,EAAKvC,GAAGuB,aAQlDoI,iBAAkBnK,EAAI8E,YACVlC,KAAKqH,GAAmB0B,eAAe/I,KAAM5C,EAAI8E,SAElD9E,gCAGK,cACC,gBACE,WACL,oBACE,iBACDkG,aACG,QACL,WACI,MACPpB,UAOVsF,iBAAiBpK,qBACP4C,KAAKqH,GAAmB2B,qBAAqBhJ,KAAM5C,GACrD8B,KACG,eACQgB,IAAayH,EAAM,KACfhL,EAAY6D,EAAKtC,aAAad,GAAMoD,EAAKrC,mBAAmBf,GAAM,YAC/DoD,EAAKiH,GACPwB,YAAYtM,GACZuC,KAAK,mBAAasB,EAAKkH,GAAUwB,eAAevM,YAGlDuD,IAGdhB,KAAK,mBAAYsB,EAAK6G,GAAmB8B,sBAA0B/L,EAAI8C,cAI9EkJ,EAAU3J,OAAO,WAEjBoI,8BACUE,2EACHqB,GAAWrB,oDAGJzF,EAAKC,UACVvC,KAAKoJ,GAASvG,OACjB,SAACX,EAAQmH,UAAWA,EAAOrB,gBAAgB1F,EAAKJ,IAChDK,0CAIOD,EAAKE,EAAa8G,UACtBtJ,KAAKoJ,GAASvG,OACjB,SAACpB,EAAiB4H,UAAWA,EAAON,eAAezG,EAAKE,EAAaf,IACrE6H,0CAIOhH,EAAKE,EAAa8G,UACtBtJ,KAAKoJ,GAASvG,OACjB,SAACpB,EAAiB4H,UAAWA,EAAOP,eAAexG,EAAKE,EAAaf,IACrE6H,gDAIahH,EAAKE,UACfxC,KAAKoJ,GAASvG,OACjB,SAAC0G,EAAiBF,UAAWE,EAAgBrK,KACzC,mBAAYW,QAAQC,QAAQuJ,EAAOL,qBAAqB1G,EAAKE,EAAatC,OAE9EL,QAAQC,QAAQ6H,gDAIJrF,EAAKE,EAAatC,UAC3BF,KAAKoJ,GAASvG,OACjB,SAAC0G,EAAiBF,UAAWE,EAAgBrK,KACzC,gBACQrC,EAASwM,EAAOF,oBAAoB7G,EAAKE,EAAatC,UACnDG,EAAEmJ,UAAU3M,GAAUA,EAASgD,QAAQC,QAAQI,MAG9DL,QAAQC,QAAQI,+CAILoC,QACV8G,GAAStH,QAAQ,mBAAUuH,EAAOZ,mBAAmBnG,gDAGnDyF,4DAAcW,yDAAM1I,KAAKoJ,GAASnL,eACpCmL,IAASK,gBAAOf,EAAK,YAAMX,iDAIzB/H,KAAKoJ,GAASjF,MAAM,wCAGlByE,SACkB,iBAAhBA,OAEwB,OADjB5I,KAAKoJ,GAASnK,QAAQ2J,IACD5I,KAAKoJ,GAASnL,OAAS2K,KAGrD5I,KAAKoJ,GAASK,OAAOb,EAAa,GAAG3K"}