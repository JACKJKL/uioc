{"version":3,"file":"bundle.js","sources":["../src/util.js","../src/Injector.js","../src/DependencyTree.js","../src/CircularError.js","../src/Loader.js","../src/plugins/BasePlugin.js","../src/plugins/ImportPlugin.js","../src/plugins/AutoPlugin.js","../src/plugins/PropertyPlugin.js","../src/plugins/ListPlugin.js","../src/plugins/MapPlugin.js","../src/plugins/AopPlugin.js","../src/IoC.js"],"sourcesContent":["/**\n * @file 工具集合\n * @author exodia(d_xinxin@163.com)\n */\nconst OBJECT = Object.prototype.toString.call({});\n\nfunction hasOwn(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction addToSet(arr, el) {\n    arr.indexOf(el) === -1 && arr.push(el);\n}\n\nfunction isObject(obj) {\n    return Object.prototype.toString.call(obj) === OBJECT;\n}\n\nfunction isPromise(obj) {\n    return obj && typeof obj === 'object' && typeof obj.then === 'function';\n}\n\nfunction warn() {\n    if (typeof console !== 'undefined') {\n        Function.prototype.apply.call(console.warn, console, arguments);\n    }\n}\n\nfunction hasRef(obj) {\n    return isObject(obj) && typeof obj.$ref === 'string';\n}\n\nexport default {\n    hasOwn,\n    addToSet,\n    isObject,\n    isPromise,\n    hasRef: hasRef,\n    warn\n}\n","/**\n * @file Injector 依赖注入类\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from './util';\n\nconst STORE = Symbol('store');\nconst GET_INSTANCE = Symbol('getInstance');\n\n/**\n * @private\n */\nexport default class Injector {\n\n    constructor(context) {\n        this.context = context;\n        this[STORE] = Object.create(null);\n    }\n\n    createInstance(component) {\n        if (!component) {\n            return Promise.resolve(null);\n        }\n\n        switch (component.scope) {\n            case 'singleton':\n                let id = component.id;\n                if (!(id in this[STORE])) {\n                    this[STORE][id] = this[GET_INSTANCE](component).then(instance => this[STORE][id] = instance);\n                }\n                return Promise.resolve(this[STORE][id]);\n            case 'transient':\n                return this[GET_INSTANCE](component);\n            case 'static':\n                return Promise.resolve(component.creator);\n        }\n    }\n\n    injectArgs({args}) {\n        return Promise.all(args.map(arg => u.hasRef(arg) ? this.context.getComponent(arg.$ref) : arg));\n    }\n\n    dispose() {\n        let store = this[STORE];\n        for (let k in store) {\n            let instance = store[k];\n            instance && typeof instance.dispose === 'function' && instance.dispose();\n        }\n\n        this[STORE] = null;\n    }\n\n    [GET_INSTANCE](component) {\n        return this.injectArgs(component).then(args => component.creator(...args));\n    }\n}\n\n","/**\n * @file DependencyNode 依赖树\n * @author exodia(d_xinxin@163.com)\n */\n\n/**\n * @private\n */\nexport default class DependencyNode {\n    data = [];\n    children = [];\n    parent = null;\n    \n    appendChild(node) {\n        node.parent = this;\n        this.children.push(node);\n        return node;\n    }\n\n    checkForCircular(id) {\n        let node = this.parent;\n        if (node !== null) {\n            let data = node.data;\n            for (let i = data.length - 1; i > -1; --i) {\n                if (node.data[i].id && node.data[i].id === id) {\n                    return node.data[i];\n                }\n\n                return node.checkForCircular(id);\n            }\n        }\n        \n        return null;\n    }\n\n    addData(data, checkForCircular) {\n        if (checkForCircular && this.checkForCircular(data.id)) {\n            return false;\n        }\n\n        this.data.push(data);\n        return true;\n    }\n}\n\n    \n","/**\n * @file 循环依赖错误\n * @author exodia(d_xinxin@163.com)\n * @private\n */\n\nexport default class CircularError extends Error {\n    constructor(message, component) {\n        super(message);\n        this.component = component;\n    }\n\n    print(...args) {\n        if (typeof console !== 'undefined') {\n            console.warn(...args);\n        }\n    }\n}\n","/**\n * @file 组件模块加载类\n * @author exodia(d_xinxin@163.com)\n */\n\nimport DependencyTree from './DependencyTree';\nimport CircularError from './CircularError';\n\n/**\n * @private\n */\nexport default class Loader {\n    amdLoader = getDefaultLoader();\n\n    constructor(context) {\n        this.context = context;\n    }\n\n    setLoaderFunction(amdGlobalLoader) {\n        this.amdLoader = amdGlobalLoader;\n    }\n\n    resolveDependentModules(componentConfig, result = {}, deps) {\n        return getDependentModules(componentConfig, this.context, result, new DependencyTree(), deps);\n    }\n\n    loadModuleMap(moduleMap) {\n        let moduleIds = Object.keys(moduleMap);\n        return new Promise(resolve => {\n            this.amdLoader(\n                moduleIds,\n                (...modules) => {\n                    modules.forEach(\n                        (factory, index) => {\n                            let moduleId = moduleIds[index];\n                            moduleMap[moduleId].forEach(\n                                config => typeof config.creator !== 'function' && this.wrapCreator(config, factory)\n                            );\n                        }\n                    );\n                    resolve();\n                }\n            );\n        });\n    }\n\n    wrapCreator(config, factory) {\n        let creator = config.creator = config.creator || factory;\n\n        // 给字面量组件和非工厂组件套一层 creator，后面构造实例就可以无需分支判断，直接调用 component.creator\n        if (!config.isFactory && config.scope !== 'static') {\n            config.creator = function (...args) {\n                return new creator(...args);\n            };\n        }\n    }\n}\n\nfunction getDependentModules(component, context, result, depTree, deps) {\n    let module = component.module;\n    if (typeof component.creator !== 'function' && module) {\n        result[module] = result[module] || [];\n        result[module].push(component);\n    }\n    context.processConfig(component.id);\n\n    let circular = depTree.checkForCircular(component.id);\n    if (circular) {\n        let msg = `${component.id} has circular dependencies `;\n        throw new CircularError(msg, component);\n    }\n\n    depTree.addData(component);\n    let child = depTree.appendChild(new DependencyTree());\n\n    deps = deps || component.argDeps.concat(component.propDeps).concat(component.setterDeps || []);\n    for (let i = deps.length - 1; i > -1; --i) {\n        if (context.hasComponent(deps[i])) {\n            getDependentModules(context.getComponentConfig(deps[i]), context, result, child);\n        }\n    }\n\n    return result;\n}\n\nfunction getDefaultLoader() {\n    if (typeof define === 'function' && define.amd) {\n        return require;\n    }\n\n    if (typeof module !== 'undefined' && module && 'exports' in module) {\n        return (ids, cb) => cb(...(ids.map(id => require(id))));\n    }\n}\n","/**\n * 基础插件类, 实现了默认的钩子接口, 继承此类实现自定义的生命周期钩子\n *\n * @implements {ILifeCircleHook}\n */\nexport default class BasePlugin {\n    /**\n     * @abstract\n     */\n    get name() {\n        throw new Error('need to be implement');\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onContainerInit}\n     */\n    onContainerInit(ioc, iocConfig) {\n        return iocConfig;\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onAddComponent}\n     */\n    onAddComponent(ioc, componentId, componentConfig) {\n        return componentConfig;\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onGetComponent}\n     */\n    onGetComponent(ioc, componentId, componentConfig) {\n        return componentConfig;\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#beforeCreateInstance}\n     */\n    beforeCreateInstance(ioc, componentId, instance) {}\n\n    /**\n     * @see {@link ILifeCircleHook#afterCreateInstance}\n     */\n    afterCreateInstance(ioc, componentId, instance) {\n        return Promise.resolve(instance);\n    }\n\n    /**\n     * @see {@link ILifeCircleHook#onContainerDispose}\n     */\n    onContainerDispose(ioc) {}\n}","/**\n * @file 导入插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport BasePlugin from './BasePlugin';\nimport u from '../util';\n\nconst ANONY_PREFIX = '^uioc-';\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class ImportPlugin extends BasePlugin {\n\n    static has(obj) {\n        return u.isObject(obj) && typeof obj.$import === 'string';\n    }\n\n    static transformConfig(ioc, config) {\n        // 解析构造函数参数\n        let argConfigs = config.args;\n        let id = null;\n        let deps = argConfigs.reduce(\n            (result, argConfig, index) => {\n                if (ImportPlugin.has(argConfig)) {\n                    // 给匿名组件配置生成一个 ioc 构件id\n                    id = ImportPlugin.createAnonymousConfig(ioc, argConfig, `${config.id}-$arg.${index}.`);\n                    argConfigs[index] = {$ref: id};\n                    result.push(id);\n                }\n                return result;\n            },\n            []\n        );\n\n        // 解析属性\n        let props = config.properties;\n        for (let k in props) {\n            if (ImportPlugin.has(props[k])) {\n                id = ImportPlugin.createAnonymousConfig(ioc, props[k], `${config.id}-$prop.${k}.`);\n                props[k] = {$ref: id};\n                deps.push(id);\n            }\n        }\n\n        return deps\n    }\n\n    static createAnonymousConfig(ioc, config = {}, idPrefix) {\n        let importId = config.$import;\n        if (!ioc.hasComponent(importId)) {\n            throw new Error(`$import ${importId} component, but it is not exist, please check!!`);\n        }\n\n        let refConfig = ioc.getComponentConfig(importId);\n        config.id = (idPrefix.indexOf(ANONY_PREFIX) !== -1 ? '' : ANONY_PREFIX) + idPrefix;\n        config.$import = undefined;\n        ioc.addComponent(config.id, {...refConfig, ...config});\n\n        return config.id;\n    }\n\n    get name() {\n        return 'import';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    onGetComponent(ioc, id, config) {\n        if (this[CACHE][id]) {\n            return config;\n        }\n\n        this[CACHE][id] = ImportPlugin.transformConfig(ioc, config);\n\n        return config;\n    }\n}\n","/**\n * @file 自动注入插件\n * @author exodia(d_xinxin@163.com)\n */\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst SETTER_REGEX = /^set[A-Z]/;\nconst SET_LENGTH = 'set'.length;\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class AutoPlugin extends BasePlugin {\n    get name() {\n        return 'auto';\n    }\n\n    static getPropertyFromSetter(name, descriptor) {\n        let prop = null;\n        if (SETTER_REGEX.test(name) && typeof descriptor.value === 'function') {\n            prop = name.charAt(SET_LENGTH).toLowerCase() + name.slice(SET_LENGTH + 1);\n        }\n\n        return prop;\n    }\n\n    static setProperty(instance, propertyName, value) {\n        let method = 'set' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n        instance[method](value);\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    afterCreateInstance(ioc, id, instance) {\n        let deps = this.resolveDependencies(ioc, id, instance);\n        if (!deps.length) {\n            return Promise.resolve(instance);\n        }\n\n        return ioc.getComponent(deps).then(\n            components => {\n                components.forEach(\n                    (component, index) => AutoPlugin.setProperty(instance, deps[index], component)\n                );\n                return instance;\n            }\n        );\n    }\n\n    resolveDependencies(ioc, id, instance) {\n        if (this[CACHE][id]) {\n            return this[CACHE][id];\n        }\n\n        let config = ioc.getComponentConfig(id) || {};\n        if (!config.auto) {\n            this[CACHE][id] = [];\n            return [];\n        }\n\n        let exclude = config.properties || {};\n        let deps = [];\n        let resultSet = Object.create(null);\n        for (let proto = instance; proto; proto = Object.getPrototypeOf(proto)) {\n            let properties = Object.getOwnPropertyNames(proto);\n            properties.forEach(\n                prop => {\n                    if (!resultSet[prop]) {\n                        resultSet[prop] = true;\n                        let descriptor = Object.getOwnPropertyDescriptor(proto, prop);\n                        prop = AutoPlugin.getPropertyFromSetter(prop, descriptor);\n                        // 有属性，未和属性配置冲突，且组件已注册\n                        prop && !u.hasOwn(exclude, prop) && ioc.hasComponent(prop) && deps.push(prop);\n                    }\n                }\n            );\n        }\n\n        this[CACHE][id] = deps;\n        config.setterDeps = deps;\n        return deps;\n    }\n}\n","/**\n * @file 属性插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class PropertyPlugin extends BasePlugin {\n    static getSetter(obj) {\n        if (u.isObject(obj) && typeof obj.$setter === 'string') {\n            return obj.$setter;\n        }\n    }\n\n    static setProperty(instance, propertyName, value, setterName) {\n        if (setterName) {\n            return instance[setterName](value);\n        }\n\n        let method = 'set' + propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n        typeof instance[method] === 'function' ? instance[method](value) : (instance[propertyName] = value);\n    }\n\n    get name() {\n        return 'property';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    afterCreateInstance(ioc, componentId, instance) {\n        if (!ioc.hasComponent(componentId)) {\n            return Promise.resolve(instance);\n        }\n\n        let config = ioc.getComponentConfig(componentId);\n        let deps = this.resolveDependencies(ioc, componentId);\n        let props = config.properties;\n        return ioc.getComponent(deps).then(\n            components => {\n                for (let k in props) {\n                    let property = props[k];\n                    let value = u.hasRef(property) ? components[deps.indexOf(property.$ref)] : property;\n                    PropertyPlugin.setProperty(instance, k, value, PropertyPlugin.getSetter(property));\n                }\n                return instance;\n            }\n        );\n    }\n\n    resolveDependencies(ioc, id) {\n        if (this[CACHE][id]) {\n            return this[CACHE][id];\n        }\n\n        let deps = this[CACHE][id] = [];\n        let config = ioc.getComponentConfig(id);\n        let properties = config.properties;\n        for (let k in properties) {\n            let property = properties[k];\n            u.hasRef(property) && deps.push(property.$ref);\n        }\n\n        config.propDeps = deps;\n\n        return deps;\n    }\n}\n","/**\n * @file 数组集合插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class ListPlugin extends BasePlugin {\n    static LIST_COMPONENT_CONFIG = {\n        creator(...args) {\n            return args;\n        },\n        isFactory: true\n    };\n\n    static LIST_ID = `${Date.now()}_list`;\n\n    static has(obj) {\n        return u.isObject(obj) && obj.$list instanceof Array;\n    }\n\n    get name() {\n        return 'list';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    onContainerInit(ioc, iocConfig) {\n        ioc.addComponent(this.constructor.LIST_ID, this.constructor.LIST_COMPONENT_CONFIG);\n        return iocConfig;\n    }\n\n    /**\n     * @override\n     */\n    onGetComponent(ioc, id, config) {\n        if (this[CACHE][id]) {\n            return config;\n        }\n        \n        const {has, LIST_ID} = this.constructor;\n        \n        // {$list: [{}, {}]} => {$import: List.LIST_ID, args: []}\n        config.args = config.args.map(\n            argConfig => has(argConfig) ? {$import: LIST_ID, args: argConfig.$list} : argConfig\n        );\n\n        let properties = config.properties;\n        for (let k in properties) {\n            let property = properties[k];\n            if (ListPlugin.has(property)) {\n                properties[k] = {$import: LIST_ID, args: property.$list};\n            }\n        }\n\n        this[CACHE][id] = true;\n        return config;\n    }\n}\n","/**\n * @file 字典集合插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport u from '../util';\nimport BasePlugin from './BasePlugin';\n\nconst CACHE = Symbol('cache');\n\n/**\n * @private\n */\nexport default class MapPlugin extends BasePlugin {\n    static MAP_COMPONENT_CONFIG = {\n        creator: Object,\n        isFactory: true\n    };\n\n    static MAP_ID = `${(new Date()).getTime()}_map`;\n\n    static has(obj) {\n        return u.isObject(obj) && u.isObject(obj.$map);\n    }\n\n    get name() {\n        return 'map';\n    }\n\n    constructor() {\n        super();\n        this[CACHE] = Object.create(null);\n    }\n\n    /**\n     * @override\n     */\n    onContainerInit(ioc, iocConfig) {\n        ioc.addComponent(this.constructor.MAP_ID, this.constructor.MAP_COMPONENT_CONFIG);\n        return iocConfig;\n    }\n\n    /**\n     * @override\n     */\n    onGetComponent(ioc, id, config) {\n        if (this[CACHE][id]) {\n            return config;\n        }\n\n        const {has, MAP_ID} = this.constructor;\n\n        // {$map: {}} => {$import: Map.MAP_ID, properties: {}}\n        config.args = config.args.map(\n            argConfig => has(argConfig) ? {$import: MAP_ID, properties: argConfig.$map} : argConfig\n        );\n\n        let properties = config.properties;\n        for (let k in properties) {\n            let property = properties[k];\n            if (MapPlugin.has(property)) {\n                properties[k] = {$import: MAP_ID, properties: property.$map};\n            }\n        }\n\n        return config;\n    }\n}\n","/**\n * @file aop插件\n * @author exodia(d_xinxin@163.com)\n */\n\nimport BasePlugin from './BasePlugin';\n\n/**\n * @private\n * @ignore\n */\nexport default class AopPlugin extends BasePlugin {\n    static AOP_COMPONENT_CONFIG = {\n        module: 'uaop',\n        scope: 'static'\n    };\n\n    static AOP_ID = Symbol('internalAop');\n\n    get name() {\n        return 'aop';\n    }\n\n    /**\n     * @override\n     */\n    onContainerInit(ioc, iocConfig) {\n        ioc.addComponent(this.constructor.AOP_ID, this.constructor.AOP_COMPONENT_CONFIG);\n        return iocConfig;\n    }\n\n    /**\n     * @override\n     */\n    afterCreateInstance(ioc, componentId, instance) {\n        let config = ioc.getComponentConfig(componentId) || {};\n        if ('aopConfig' in config) {\n            return ioc.getComponent(this.constructor.AOP_ID).then(\n                aop => (config.aopConfig.advisors || []).reduce(\n                    (instance, {matcher, advices}) => {\n                        return aop.createObjectProxy(instance, matcher, advices)\n                    },\n                    instance\n                )\n            );\n        }\n\n        return Promise.resolve(instance);\n    }\n}\n","/**\n * @file IoC 容器类\n * @author exodia (d_xinxin@163.com)\n */\n\nimport Injector from './Injector';\nimport u from './util';\nimport Loader from './Loader';\nimport ImportPlugin from './plugins/ImportPlugin';\nimport AutoPlugin from './plugins/AutoPlugin';\nimport PropertyPlugin from './plugins/PropertyPlugin';\nimport ListPlugin from './plugins/ListPlugin';\nimport MapPlugin from './plugins/MapPlugin';\nimport AopPlugin from './plugins/AopPlugin';\n\nconst PLUGIN_COLLECTION = Symbol('collection');\nconst COMPONENTS = Symbol('components');\nconst CREATE_COMPONENT = Symbol('createComponent');\nconst CREATE_INSTANCE = Symbol('createInstance');\nconst LOADER = Symbol('loader');\nconst INJECTOR = Symbol('injector');\nconst NULL = {};\n\n/**\n * IoC 容器类\n */\nexport default class IoC {\n    /**\n     * 根据配置实例化一个 IoC 容器\n     *\n     * @param {IoCConfig} [config] ioc 容器配置\n     */\n    constructor(config = {}) {\n        this[COMPONENTS] = Object.create(null);\n        this[PLUGIN_COLLECTION] = new PluginCollection([\n            new ListPlugin(),\n            new MapPlugin(),\n            new ImportPlugin(),\n            new AopPlugin(),\n            new PropertyPlugin(),\n            new AutoPlugin()\n        ]);\n        this[PLUGIN_COLLECTION].addPlugins(config.plugins);\n        this[LOADER] = new Loader(this);\n        this[INJECTOR] = new Injector(this);\n        config = this[PLUGIN_COLLECTION].onContainerInit(this, config);\n        this.initConfig(config);\n    }\n\n    /**\n     * 初始化配置\n     * @param {IoCConfig} iocConfig ioc 配置\n     * @protected\n     */\n    initConfig(iocConfig) {\n\n        iocConfig.loader && this.setLoaderFunction(iocConfig.loader);\n\n        this.addComponent(iocConfig.components || {});\n    }\n\n    /**\n     *\n     * 向容器中注册组件\n     *\n     * @param {string | Object.<string, ComponentConfig>} id 组件 id 或者组件配置集合\n     * @param {ComponentConfig} [config] 组件配置, 第一个参数为组件 id 时有效\n     * @example\n     * ioc.addComponent('list', {\n     *     // 构造函数创建构件 new creator, 或者字符串，字符串则为 amd 模块名\n     *     creator: require('./List'),\n     *     scope: 'transient',\n     *     args: [{$ref: 'entityName'}],\n     *\n     *     // 属性注入， 不设置$setter, 则直接instance.xxx = xxx\n     *     properties: {\n     *          model: {$ref: 'listModel'},\n     *          view: {$ref: 'listView'},\n     *          name: 'xxxx' // 未设置$ref/$import操作符，'xxxx' 即为依赖值\n     *     }\n     * });\n     *\n     * ioc.addComponent({\n     *     listData: {\n     *         creator: 'ListData',\n     *         scope: 'transient',\n     *         properties: {\n     *             data: {\n     *                 $import: 'requestStrategy', // 创建匿名组件，默认继承 requestStrategy 的配置，\n     *                 args: ['list', 'list'] // 重写 requestStrategy 的 args 配置\n     *             }\n     *         }\n     *      }\n     * });\n     */\n    addComponent(id, config) {\n        if (typeof id === 'object') {\n            for (let k in id) {\n                this.addComponent(k, id[k]);\n            }\n            return;\n        }\n\n        if (this.hasComponent(id)) {\n            throw new Error(`${String(id)} has been added!`);\n        }\n        else {\n            this[COMPONENTS][id] = this[CREATE_COMPONENT].call(this, id, config);\n        }\n    }\n\n    /**\n     * 获取组件实例\n     *\n     * @param {string | string[]} id 单个组件 id 字符串或者一系列组件 id 数组\n     * @return {Promise<*> | Promise<*[]>} 值为组件实例(传入参数为组件数组时, 值为组件实例数组)的 promise\n     */\n    getComponent(id) {\n        if (id instanceof Array) {\n            return Promise.all(id.map(id => this.getComponent(id)));\n        }\n        let moduleMap = Object.create(null);\n\n        if (!this.hasComponent(id)) {\n            id = String(id);\n            return Promise.reject(new Error(`\\`${id}\\` has not been added to the Ioc`));\n        }\n        else {\n            let config = this.getComponentConfig(id);\n            this.processConfig(id);\n            try {\n                moduleMap = this[LOADER].resolveDependentModules(config, moduleMap, config.argDeps);\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        }\n\n        return this[LOADER].loadModuleMap(moduleMap).then(() => this[CREATE_INSTANCE](id));\n    }\n\n    /**\n     * 检测是否注册过某个组件\n     *\n     * @param {string} id 组件 id\n     * @return {bool}\n     */\n    hasComponent(id) {\n        return !!this[COMPONENTS][id];\n    }\n\n    /**\n     * 获取组件配置，不传入则返回所有组件配置\n     *\n     * @ignore\n     * @param {string} [id] 组件id\n     * @return {*}\n     */\n    getComponentConfig(id) {\n        return id ? this[COMPONENTS][id] : this[COMPONENTS];\n    }\n\n    /**\n     * 设置 IoC 的模块加载器\n     *\n     * @param {Function} amdLoader 符合 AMD 规范的模块加载器\n     */\n    setLoaderFunction(amdLoader) {\n        this[LOADER].setLoaderFunction(amdLoader);\n    }\n\n    /**\n     * 销毁容器，会遍历容器中的单例，如果有设置 dispose，调用他们的 dispose 方法\n     */\n    dispose() {\n        this[PLUGIN_COLLECTION].onContainerDispose(this);\n        this[INJECTOR].dispose();\n        this[COMPONENTS] = null;\n    }\n\n    /**\n     * 在指定位置添加插件\n     *\n     * @param {ILifeCircleHook[]} plugins 插件数组\n     * @param {number} [pos] 插入位置, 默认为当前 ioc 容器插件队列末尾\n     */\n    addPlugins(plugins, pos) {\n        this[PLUGIN_COLLECTION].addPlugins(plugins, pos);\n    }\n\n    /**\n     * 获取当前实例的插件队列\n     *\n     * @return {ILifeCircleHook[]}\n     */\n    getPlugins() {\n        return this[PLUGIN_COLLECTION].getPlugins();\n    }\n\n    /**\n     * 移除指定的插件或指定位置的插件\n     *\n     * @param {number | ILifeCircleHook} pluginOrPos 插件实例或者插件位置\n     * @return {bool} 成功移除返回 true\n     */\n    removePlugin(pluginOrPos) {\n        return this[PLUGIN_COLLECTION].removePlugin(pluginOrPos);\n    }\n\n    // todo: to be private\n    /**\n     * @ignore\n     */\n    processConfig(id) {\n        let config = this.getComponentConfig(id);\n        config = this[PLUGIN_COLLECTION].onGetComponent(this, id, config);\n        this[COMPONENTS][id] = config;\n        if (!config.argDeps) {\n            let deps = config.argDeps = [];\n            let args = config.args;\n            for (let i = args.length - 1; i > -1; --i) {\n                u.hasRef(args[i]) && deps.push(args[i].$ref);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    [CREATE_COMPONENT](id, config) {\n        config = this[PLUGIN_COLLECTION].onAddComponent(this, id, config);\n        let component = {\n            id: id,\n            args: [],\n            properties: {},\n            argDeps: null,\n            propDeps: null,\n            setterDeps: null,\n            scope: 'transient',\n            creator: null,\n            module: undefined,\n            isFactory: false,\n            auto: false,\n            instance: null,\n            ...config\n        };\n\n        // creator为函数，那么先包装下\n        typeof component.creator === 'function' && this[LOADER].wrapCreator(component);\n\n        return component;\n    }\n\n    /**\n     * @private\n     */\n    [CREATE_INSTANCE](id) {\n        return this[PLUGIN_COLLECTION].beforeCreateInstance(this, id)\n            .then(\n                instance => {\n                    if (instance === NULL) {\n                        let component = this.hasComponent(id) ? this.getComponentConfig(id) : null;\n                        return this[INJECTOR].createInstance(component);\n                    }\n\n                    return instance;\n                }\n            )\n            .then(instance => this[PLUGIN_COLLECTION].afterCreateInstance(this, id, instance));\n    }\n}\n\nconst PLUGINS = Symbol('plugins');\n\nclass PluginCollection {\n    constructor(plugins = []) {\n        this[PLUGINS] = plugins;\n    }\n\n    onContainerInit(ioc, iocConfig) {\n        return this[PLUGINS].reduce(\n            (config, plugin) => plugin.onContainerInit(ioc, config),\n            iocConfig\n        );\n    }\n\n    onAddComponent(ioc, componentId, initialComponentConfig) {\n        return this[PLUGINS].reduce(\n            (componentConfig, plugin) => plugin.onAddComponent(ioc, componentId, componentConfig),\n            initialComponentConfig\n        );\n    }\n\n    onGetComponent(ioc, componentId, initialComponentConfig) {\n        return this[PLUGINS].reduce(\n            (componentConfig, plugin) => plugin.onGetComponent(ioc, componentId, componentConfig),\n            initialComponentConfig\n        );\n    }\n\n    beforeCreateInstance(ioc, componentId) {\n        return this[PLUGINS].reduce(\n            (instancePromise, plugin) => instancePromise.then(\n                instance => {\n                    instance = instance === NULL ? undefined : instance;\n                    let result = plugin.beforeCreateInstance(ioc, componentId, instance);\n                    return u.isPromise(result) ? result : Promise.resolve(NULL);\n                }\n            ),\n            Promise.resolve(NULL)\n        );\n    }\n\n    afterCreateInstance(ioc, componentId, instance) {\n        return this[PLUGINS].reduce(\n            (instancePromise, plugin) => instancePromise.then(\n                instance => {\n                    let result = plugin.afterCreateInstance(ioc, componentId, instance);\n                    return u.isPromise(result) ? result : Promise.resolve(instance);\n                }\n            ),\n            Promise.resolve(instance)\n        );\n    }\n\n    onContainerDispose(ioc) {\n        this[PLUGINS].forEach(plugin => plugin.onContainerDispose(ioc));\n    }\n\n    addPlugins(plugins = [], pos = this[PLUGINS].length) {\n        this[PLUGINS].splice(pos, 0, ...plugins);\n    }\n\n    getPlugins() {\n        return this[PLUGINS].slice(0);\n    }\n\n    removePlugin(pluginOrPos) {\n        if (typeof pluginOrPos !== 'number') {\n            pluginOrPos = this[PLUGINS].indexOf(pluginOrPos);\n            pluginOrPos = pluginOrPos === -1 ? this[PLUGINS].length : pluginOrPos;\n        }\n\n        return !!this[PLUGINS].splice(pluginOrPos, 1).length;\n    }\n}"],"names":["hasOwn","object","key","Object","prototype","hasOwnProperty","call","addToSet","arr","el","indexOf","push","isObject","obj","toString","OBJECT","isPromise","then","warn","console","apply","arguments","hasRef","$ref","getDependentModules","component","context","result","depTree","deps","module","creator","processConfig","id","circular","checkForCircular","msg","CircularError","addData","child","appendChild","DependencyTree","argDeps","concat","propDeps","setterDeps","i","length","hasComponent","getComponentConfig","getDefaultLoader","define","amd","require","ids","cb","map","STORE","Symbol","GET_INSTANCE","Injector","create","Promise","resolve","scope","this","_this","instance","args","all","u","arg","_this2","getComponent","store","k","dispose","injectArgs","DependencyNode","data","children","parent","node","message","Error","Loader","amdLoader","amdGlobalLoader","componentConfig","moduleMap","moduleIds","keys","modules","forEach","factory","index","moduleId","config","wrapCreator","isFactory","BasePlugin","ioc","iocConfig","componentId","ANONY_PREFIX","CACHE","ImportPlugin","$import","argConfigs","reduce","argConfig","has","createAnonymousConfig","props","properties","idPrefix","importId","refConfig","undefined","addComponent","transformConfig","SETTER_REGEX","SET_LENGTH","AutoPlugin","name","descriptor","prop","test","value","charAt","toLowerCase","slice","propertyName","method","toUpperCase","resolveDependencies","setProperty","auto","exclude","resultSet","proto","getOwnPropertyNames","getOwnPropertyDescriptor","getPropertyFromSetter","getPrototypeOf","PropertyPlugin","$setter","setterName","property","components","getSetter","ListPlugin","$list","Array","constructor","LIST_ID","LIST_COMPONENT_CONFIG","Date","now","MapPlugin","$map","MAP_ID","MAP_COMPONENT_CONFIG","getTime","AopPlugin","AOP_ID","AOP_COMPONENT_CONFIG","aopConfig","advisors","matcher","advices","aop","createObjectProxy","PLUGIN_COLLECTION","COMPONENTS","CREATE_COMPONENT","CREATE_INSTANCE","LOADER","INJECTOR","NULL","IoC","PluginCollection","addPlugins","plugins","onContainerInit","initConfig","loader","setLoaderFunction","String","reject","resolveDependentModules","e","loadModuleMap","onContainerDispose","pos","getPlugins","pluginOrPos","removePlugin","onGetComponent","onAddComponent","beforeCreateInstance","createInstance","afterCreateInstance","PLUGINS","plugin","initialComponentConfig","instancePromise","splice"],"mappings":"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"}